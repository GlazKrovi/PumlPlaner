//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Grammar/Pumlg.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System.CodeDom.Compiler;
using System.Diagnostics;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[GeneratedCode("ANTLR", "4.13.1")]
[CLSCompliant(false)]
public partial class PumlgParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, CONNECTOR=36, NEWPAGE=37, NEWLINE=38, 
		IDENT=39, LBRACKET=40, RBRACKET=41, COMMENT=42, WS=43;
	public const int
		RULE_uml = 0, RULE_class_diagram = 1, RULE_class_declaration = 2, RULE_inheritance_declaration = 3, 
		RULE_extends_declaration = 4, RULE_implements_declaration = 5, RULE_class_member = 6, 
		RULE_hide_declaration = 7, RULE_attribute = 8, RULE_method = 9, RULE_connection_left = 10, 
		RULE_connection_right = 11, RULE_connection = 12, RULE_multiplicity = 13, 
		RULE_visibility = 14, RULE_function_argument = 15, RULE_function_argument_list = 16, 
		RULE_template_argument = 17, RULE_template_argument_list = 18, RULE_template_parameter_list = 19, 
		RULE_template_parameter = 20, RULE_ident = 21, RULE_modifiers = 22, RULE_stereotype = 23, 
		RULE_type_declaration = 24, RULE_class_type = 25, RULE_item_list = 26, 
		RULE_enum_declaration = 27;
	public static readonly string[] ruleNames = {
		"uml", "class_diagram", "class_declaration", "inheritance_declaration", 
		"extends_declaration", "implements_declaration", "class_member", "hide_declaration", 
		"attribute", "method", "connection_left", "connection_right", "connection", 
		"multiplicity", "visibility", "function_argument", "function_argument_list", 
		"template_argument", "template_argument_list", "template_parameter_list", 
		"template_parameter", "ident", "modifiers", "stereotype", "type_declaration", 
		"class_type", "item_list", "enum_declaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'@startuml'", "'@enduml'", "'{'", "'}'", "'extends'", "'implements'", 
		"','", "'hide'", "':'", "'('", "')'", "'\"'", "'*'", "'0..1'", "'0..*'", 
		"'1..*'", "'1'", "'+'", "'-'", "'#'", "'<'", "'>'", "'{static}'", "'{abstract}'", 
		"'{override}'", "'{virtual}'", "'{sealed}'", "'{readonly}'", "'{const}'", 
		"'<<'", "'>>'", "'abstract'", "'class'", "'interface'", "'enum'", null, 
		"'newpage'", null, null, "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"CONNECTOR", "NEWPAGE", "NEWLINE", "IDENT", "LBRACKET", "RBRACKET", "COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pumlg.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PumlgParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PumlgParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PumlgParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class UmlContext : ParserRuleContext {
		[DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PumlgParser.NEWLINE, 0); }
		[DebuggerNonUserCode] public Class_diagramContext class_diagram() {
			return GetRuleContext<Class_diagramContext>(0);
		}
		public UmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uml; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterUml(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitUml(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UmlContext uml() {
		UmlContext _localctx = new UmlContext(Context, State);
		EnterRule(_localctx, 0, RULE_uml);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(T__0);
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 57;
				Match(NEWLINE);
				}
				break;
			case 2:
				{
				State = 58;
				class_diagram();
				}
				break;
			}
			State = 61;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_diagramContext : ParserRuleContext {
		[DebuggerNonUserCode] public Class_declarationContext[] class_declaration() {
			return GetRuleContexts<Class_declarationContext>();
		}
		[DebuggerNonUserCode] public Class_declarationContext class_declaration(int i) {
			return GetRuleContext<Class_declarationContext>(i);
		}
		[DebuggerNonUserCode] public Enum_declarationContext[] enum_declaration() {
			return GetRuleContexts<Enum_declarationContext>();
		}
		[DebuggerNonUserCode] public Enum_declarationContext enum_declaration(int i) {
			return GetRuleContext<Enum_declarationContext>(i);
		}
		[DebuggerNonUserCode] public ConnectionContext[] connection() {
			return GetRuleContexts<ConnectionContext>();
		}
		[DebuggerNonUserCode] public ConnectionContext connection(int i) {
			return GetRuleContext<ConnectionContext>(i);
		}
		[DebuggerNonUserCode] public Hide_declarationContext[] hide_declaration() {
			return GetRuleContexts<Hide_declarationContext>();
		}
		[DebuggerNonUserCode] public Hide_declarationContext hide_declaration(int i) {
			return GetRuleContext<Hide_declarationContext>(i);
		}
		[DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PumlgParser.NEWLINE); }
		[DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PumlgParser.NEWLINE, i);
		}
		public Class_diagramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_diagram; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterClass_diagram(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitClass_diagram(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_diagram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_diagramContext class_diagram() {
		Class_diagramContext _localctx = new Class_diagramContext(Context, State);
		EnterRule(_localctx, 2, RULE_class_diagram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 889058230528L) != 0)) {
				{
				State = 68;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__31:
				case T__32:
				case T__33:
					{
					State = 63;
					class_declaration();
					}
					break;
				case T__34:
					{
					State = 64;
					enum_declaration();
					}
					break;
				case IDENT:
					{
					State = 65;
					connection();
					}
					break;
				case T__7:
					{
					State = 66;
					hide_declaration();
					}
					break;
				case NEWLINE:
					{
					State = 67;
					Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		[DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[DebuggerNonUserCode] public Template_parameter_listContext template_parameter_list() {
			return GetRuleContext<Template_parameter_listContext>(0);
		}
		[DebuggerNonUserCode] public StereotypeContext stereotype() {
			return GetRuleContext<StereotypeContext>(0);
		}
		[DebuggerNonUserCode] public Inheritance_declarationContext inheritance_declaration() {
			return GetRuleContext<Inheritance_declarationContext>(0);
		}
		[DebuggerNonUserCode] public Class_memberContext[] class_member() {
			return GetRuleContexts<Class_memberContext>();
		}
		[DebuggerNonUserCode] public Class_memberContext class_member(int i) {
			return GetRuleContext<Class_memberContext>(i);
		}
		[DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PumlgParser.NEWLINE); }
		[DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PumlgParser.NEWLINE, i);
		}
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			class_type();
			State = 74;
			ident();
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 75;
				template_parameter_list();
				}
			}

			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__29) {
				{
				State = 78;
				stereotype();
				}
			}

			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4 || _la==T__5) {
				{
				State = 81;
				inheritance_declaration();
				}
			}

			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 84;
				Match(T__2);
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 825700909056L) != 0)) {
					{
					State = 87;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__17:
					case T__18:
					case T__19:
					case T__22:
					case T__23:
					case T__24:
					case T__25:
					case T__26:
					case T__27:
					case T__28:
					case IDENT:
						{
						State = 85;
						class_member();
						}
						break;
					case NEWLINE:
						{
						State = 86;
						Match(NEWLINE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 91;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 92;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inheritance_declarationContext : ParserRuleContext {
		[DebuggerNonUserCode] public Extends_declarationContext extends_declaration() {
			return GetRuleContext<Extends_declarationContext>(0);
		}
		[DebuggerNonUserCode] public Implements_declarationContext implements_declaration() {
			return GetRuleContext<Implements_declarationContext>(0);
		}
		public Inheritance_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance_declaration; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterInheritance_declaration(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitInheritance_declaration(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInheritance_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inheritance_declarationContext inheritance_declaration() {
		Inheritance_declarationContext _localctx = new Inheritance_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_inheritance_declaration);
		int _la;
		try {
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95;
				extends_declaration();
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 96;
					implements_declaration();
					}
				}

				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				implements_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extends_declarationContext : ParserRuleContext {
		[DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public Extends_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extends_declaration; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterExtends_declaration(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitExtends_declaration(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtends_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extends_declarationContext extends_declaration() {
		Extends_declarationContext _localctx = new Extends_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_extends_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(T__4);
			State = 103;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implements_declarationContext : ParserRuleContext {
		[DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public Implements_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implements_declaration; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterImplements_declaration(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitImplements_declaration(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplements_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implements_declarationContext implements_declaration() {
		Implements_declarationContext _localctx = new Implements_declarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_implements_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(T__5);
			State = 106;
			ident();
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 107;
				Match(T__6);
				State = 108;
				ident();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_memberContext : ParserRuleContext {
		[DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[DebuggerNonUserCode] public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public Class_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterClass_member(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitClass_member(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_memberContext class_member() {
		Class_memberContext _localctx = new Class_memberContext(Context, State);
		EnterRule(_localctx, 12, RULE_class_member);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				attribute();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hide_declarationContext : ParserRuleContext {
		[DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public Hide_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hide_declaration; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterHide_declaration(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitHide_declaration(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHide_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hide_declarationContext hide_declaration() {
		Hide_declarationContext _localctx = new Hide_declarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_hide_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(T__7);
			State = 119;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PumlgParser.NEWLINE, 0); }
		[DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 16, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1835008L) != 0)) {
				{
				State = 121;
				visibility();
				}
			}

			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1065353216L) != 0)) {
				{
				State = 124;
				modifiers();
				}
			}

			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 128;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 127;
					type_declaration();
					}
					break;
				}
				State = 130;
				ident();
				}
				break;
			case 2:
				{
				State = 131;
				ident();
				State = 132;
				Match(T__8);
				State = 133;
				type_declaration();
				}
				break;
			}
			State = 137;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PumlgParser.NEWLINE, 0); }
		[DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[DebuggerNonUserCode] public Function_argument_listContext function_argument_list() {
			return GetRuleContext<Function_argument_listContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 18, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1835008L) != 0)) {
				{
				State = 139;
				visibility();
				}
			}

			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1065353216L) != 0)) {
				{
				State = 142;
				modifiers();
				}
			}

			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 146;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 145;
					type_declaration();
					}
					break;
				}
				State = 148;
				ident();
				State = 149;
				Match(T__9);
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENT) {
					{
					State = 150;
					function_argument_list();
					}
				}

				State = 153;
				Match(T__10);
				}
				break;
			case 2:
				{
				State = 155;
				ident();
				State = 156;
				Match(T__9);
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENT) {
					{
					State = 157;
					function_argument_list();
					}
				}

				State = 160;
				Match(T__10);
				State = 161;
				Match(T__8);
				State = 162;
				type_declaration();
				}
				break;
			}
			State = 166;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Connection_leftContext : ParserRuleContext {
		public IdentContext instance;
		public IdentContext attrib;
		public MultiplicityContext mult;
		[DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[DebuggerNonUserCode] public MultiplicityContext multiplicity() {
			return GetRuleContext<MultiplicityContext>(0);
		}
		public Connection_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connection_left; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterConnection_left(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitConnection_left(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnection_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Connection_leftContext connection_left() {
		Connection_leftContext _localctx = new Connection_leftContext(Context, State);
		EnterRule(_localctx, 20, RULE_connection_left);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_localctx.instance = ident();
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 169;
				Match(T__11);
				State = 170;
				_localctx.attrib = ident();
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 253952L) != 0)) {
					{
					State = 171;
					_localctx.mult = multiplicity();
					}
				}

				State = 174;
				Match(T__11);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Connection_rightContext : ParserRuleContext {
		public IdentContext attrib;
		public MultiplicityContext mult;
		public IdentContext instance;
		[DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[DebuggerNonUserCode] public MultiplicityContext multiplicity() {
			return GetRuleContext<MultiplicityContext>(0);
		}
		public Connection_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connection_right; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterConnection_right(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitConnection_right(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnection_right(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Connection_rightContext connection_right() {
		Connection_rightContext _localctx = new Connection_rightContext(Context, State);
		EnterRule(_localctx, 22, RULE_connection_right);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 178;
				Match(T__11);
				State = 179;
				_localctx.attrib = ident();
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 253952L) != 0)) {
					{
					State = 180;
					_localctx.mult = multiplicity();
					}
				}

				State = 183;
				Match(T__11);
				}
			}

			State = 187;
			_localctx.instance = ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionContext : ParserRuleContext {
		public Connection_leftContext left;
		public Connection_rightContext right;
		[DebuggerNonUserCode] public ITerminalNode CONNECTOR() { return GetToken(PumlgParser.CONNECTOR, 0); }
		[DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PumlgParser.NEWLINE, 0); }
		[DebuggerNonUserCode] public Connection_leftContext connection_left() {
			return GetRuleContext<Connection_leftContext>(0);
		}
		[DebuggerNonUserCode] public Connection_rightContext connection_right() {
			return GetRuleContext<Connection_rightContext>(0);
		}
		[DebuggerNonUserCode] public StereotypeContext stereotype() {
			return GetRuleContext<StereotypeContext>(0);
		}
		public ConnectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connection; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterConnection(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitConnection(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionContext connection() {
		ConnectionContext _localctx = new ConnectionContext(Context, State);
		EnterRule(_localctx, 24, RULE_connection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_localctx.left = connection_left();
			State = 190;
			Match(CONNECTOR);
			State = 191;
			_localctx.right = connection_right();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 192;
				Match(T__8);
				State = 193;
				stereotype();
				}
			}

			State = 196;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicityContext : ParserRuleContext {
		public MultiplicityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicity; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterMultiplicity(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitMultiplicity(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicityContext multiplicity() {
		MultiplicityContext _localctx = new MultiplicityContext(Context, State);
		EnterRule(_localctx, 26, RULE_multiplicity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 253952L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
	 
		public VisibilityContext() { }
		public virtual void CopyFrom(VisibilityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Visibility_publicContext : VisibilityContext {
		public Visibility_publicContext(VisibilityContext context) { CopyFrom(context); }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterVisibility_public(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitVisibility_public(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility_public(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Visibility_privateContext : VisibilityContext {
		public Visibility_privateContext(VisibilityContext context) { CopyFrom(context); }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterVisibility_private(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitVisibility_private(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility_private(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Visibility_protectedContext : VisibilityContext {
		public Visibility_protectedContext(VisibilityContext context) { CopyFrom(context); }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterVisibility_protected(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitVisibility_protected(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility_protected(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 28, RULE_visibility);
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				_localctx = new Visibility_publicContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				Match(T__17);
				}
				break;
			case T__18:
				_localctx = new Visibility_privateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				Match(T__18);
				}
				break;
			case T__19:
				_localctx = new Visibility_protectedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 202;
				Match(T__19);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentContext : ParserRuleContext {
		[DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterFunction_argument(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitFunction_argument(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentContext function_argument() {
		Function_argumentContext _localctx = new Function_argumentContext(Context, State);
		EnterRule(_localctx, 30, RULE_function_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 205;
				type_declaration();
				}
				break;
			}
			State = 208;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argument_listContext : ParserRuleContext {
		[DebuggerNonUserCode] public Function_argumentContext[] function_argument() {
			return GetRuleContexts<Function_argumentContext>();
		}
		[DebuggerNonUserCode] public Function_argumentContext function_argument(int i) {
			return GetRuleContext<Function_argumentContext>(i);
		}
		public Function_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument_list; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterFunction_argument_list(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitFunction_argument_list(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argument_listContext function_argument_list() {
		Function_argument_listContext _localctx = new Function_argument_listContext(Context, State);
		EnterRule(_localctx, 32, RULE_function_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			function_argument();
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 211;
				Match(T__6);
				State = 212;
				function_argument();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_argumentContext : ParserRuleContext {
		[DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Template_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_argument; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterTemplate_argument(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitTemplate_argument(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_argumentContext template_argument() {
		Template_argumentContext _localctx = new Template_argumentContext(Context, State);
		EnterRule(_localctx, 34, RULE_template_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			type_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_argument_listContext : ParserRuleContext {
		[DebuggerNonUserCode] public Template_argumentContext[] template_argument() {
			return GetRuleContexts<Template_argumentContext>();
		}
		[DebuggerNonUserCode] public Template_argumentContext template_argument(int i) {
			return GetRuleContext<Template_argumentContext>(i);
		}
		public Template_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_argument_list; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterTemplate_argument_list(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitTemplate_argument_list(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_argument_listContext template_argument_list() {
		Template_argument_listContext _localctx = new Template_argument_listContext(Context, State);
		EnterRule(_localctx, 36, RULE_template_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			template_argument();
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 221;
				Match(T__6);
				State = 222;
				template_argument();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_parameter_listContext : ParserRuleContext {
		[DebuggerNonUserCode] public Template_parameterContext[] template_parameter() {
			return GetRuleContexts<Template_parameterContext>();
		}
		[DebuggerNonUserCode] public Template_parameterContext template_parameter(int i) {
			return GetRuleContext<Template_parameterContext>(i);
		}
		public Template_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_parameter_list; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterTemplate_parameter_list(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitTemplate_parameter_list(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_parameter_listContext template_parameter_list() {
		Template_parameter_listContext _localctx = new Template_parameter_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_template_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(T__20);
			State = 229;
			template_parameter();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 230;
				Match(T__6);
				State = 231;
				template_parameter();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 237;
			Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_parameterContext : ParserRuleContext {
		[DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public Template_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_parameter; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterTemplate_parameter(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitTemplate_parameter(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_parameterContext template_parameter() {
		Template_parameterContext _localctx = new Template_parameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_template_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(PumlgParser.IDENT, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 42, RULE_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifiersContext : ParserRuleContext {
		public IToken static_mod;
		public IToken abstract_mod;
		public IToken override_mod;
		public IToken virtual_mod;
		public IToken sealed_mod;
		public IToken readonly_mod;
		public IToken const_mod;
		public ModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifiers; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterModifiers(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitModifiers(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifiersContext modifiers() {
		ModifiersContext _localctx = new ModifiersContext(Context, State);
		EnterRule(_localctx, 44, RULE_modifiers);
		try {
			State = 250;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				_localctx.static_mod = Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				_localctx.abstract_mod = Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245;
				_localctx.override_mod = Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 246;
				_localctx.virtual_mod = Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 5);
				{
				State = 247;
				_localctx.sealed_mod = Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 6);
				{
				State = 248;
				_localctx.readonly_mod = Match(T__27);
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 7);
				{
				State = 249;
				_localctx.const_mod = Match(T__28);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StereotypeContext : ParserRuleContext {
		public IdentContext name;
		public IdentContext _ident;
		public IList<IdentContext> _args = new List<IdentContext>();
		[DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public StereotypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stereotype; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterStereotype(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitStereotype(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStereotype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StereotypeContext stereotype() {
		StereotypeContext _localctx = new StereotypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_stereotype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(T__29);
			State = 253;
			_localctx.name = ident();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 254;
				Match(T__9);
				State = 255;
				_localctx._ident = ident();
				_localctx._args.Add(_localctx._ident);
				State = 256;
				Match(T__10);
				}
			}

			State = 260;
			Match(T__30);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
	 
		public Type_declarationContext() { }
		public virtual void CopyFrom(Type_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class List_typeContext : Type_declarationContext {
		[DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(PumlgParser.LBRACKET, 0); }
		[DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(PumlgParser.RBRACKET, 0); }
		public List_typeContext(Type_declarationContext context) { CopyFrom(context); }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterList_type(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitList_type(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_type(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Generic_simple_typeContext : Type_declarationContext {
		[DebuggerNonUserCode] public Template_parameterContext template_parameter() {
			return GetRuleContext<Template_parameterContext>(0);
		}
		public Generic_simple_typeContext(Type_declarationContext context) { CopyFrom(context); }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterGeneric_simple_type(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitGeneric_simple_type(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_simple_type(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Simple_typeContext : Type_declarationContext {
		[DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public Simple_typeContext(Type_declarationContext context) { CopyFrom(context); }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Template_typeContext : Type_declarationContext {
		[DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[DebuggerNonUserCode] public Template_argument_listContext template_argument_list() {
			return GetRuleContext<Template_argument_listContext>(0);
		}
		public Template_typeContext(Type_declarationContext context) { CopyFrom(context); }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterTemplate_type(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitTemplate_type(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_type(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Generic_list_typeContext : Type_declarationContext {
		[DebuggerNonUserCode] public Template_parameterContext template_parameter() {
			return GetRuleContext<Template_parameterContext>(0);
		}
		[DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(PumlgParser.LBRACKET, 0); }
		[DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(PumlgParser.RBRACKET, 0); }
		public Generic_list_typeContext(Type_declarationContext context) { CopyFrom(context); }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterGeneric_list_type(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitGeneric_list_type(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_list_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_type_declaration);
		int _la;
		try {
			State = 279;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new Template_typeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 262;
				ident();
				State = 263;
				Match(T__20);
				State = 265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENT) {
					{
					State = 264;
					template_argument_list();
					}
				}

				State = 267;
				Match(T__21);
				}
				break;
			case 2:
				_localctx = new List_typeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				ident();
				State = 270;
				Match(LBRACKET);
				State = 271;
				Match(RBRACKET);
				}
				break;
			case 3:
				_localctx = new Generic_list_typeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 273;
				template_parameter();
				State = 274;
				Match(LBRACKET);
				State = 275;
				Match(RBRACKET);
				}
				break;
			case 4:
				_localctx = new Generic_simple_typeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 277;
				template_parameter();
				}
				break;
			case 5:
				_localctx = new Simple_typeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 278;
				ident();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 50, RULE_class_type);
		int _la;
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 281;
				Match(T__31);
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32) {
					{
					State = 282;
					Match(T__32);
					}
				}

				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285;
				Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286;
				Match(T__33);
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32) {
					{
					State = 287;
					Match(T__32);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_listContext : ParserRuleContext {
		[DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PumlgParser.NEWLINE); }
		[DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PumlgParser.NEWLINE, i);
		}
		public Item_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_list; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterItem_list(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitItem_list(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_listContext item_list() {
		Item_listContext _localctx = new Item_listContext(Context, State);
		EnterRule(_localctx, 52, RULE_item_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 292;
				ident();
				State = 293;
				Match(NEWLINE);
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		[DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PumlgParser.NEWLINE, 0); }
		[DebuggerNonUserCode] public Item_listContext item_list() {
			return GetRuleContext<Item_listContext>(0);
		}
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
		[DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterEnum_declaration(this);
		}
		[DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitEnum_declaration(this);
		}
		[DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_enum_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			Match(T__34);
			State = 300;
			ident();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 301;
				Match(T__2);
				State = 302;
				Match(NEWLINE);
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENT) {
					{
					State = 303;
					item_list();
					}
				}

				State = 306;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,43,310,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,0,1,
		0,3,0,60,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,5,1,69,8,1,10,1,12,1,72,9,1,1,
		2,1,2,1,2,3,2,77,8,2,1,2,3,2,80,8,2,1,2,3,2,83,8,2,1,2,1,2,1,2,5,2,88,
		8,2,10,2,12,2,91,9,2,1,2,3,2,94,8,2,1,3,1,3,3,3,98,8,3,1,3,3,3,101,8,3,
		1,4,1,4,1,4,1,5,1,5,1,5,1,5,5,5,110,8,5,10,5,12,5,113,9,5,1,6,1,6,3,6,
		117,8,6,1,7,1,7,1,7,1,8,3,8,123,8,8,1,8,3,8,126,8,8,1,8,3,8,129,8,8,1,
		8,1,8,1,8,1,8,1,8,3,8,136,8,8,1,8,1,8,1,9,3,9,141,8,9,1,9,3,9,144,8,9,
		1,9,3,9,147,8,9,1,9,1,9,1,9,3,9,152,8,9,1,9,1,9,1,9,1,9,1,9,3,9,159,8,
		9,1,9,1,9,1,9,1,9,3,9,165,8,9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,173,8,10,
		1,10,1,10,3,10,177,8,10,1,11,1,11,1,11,3,11,182,8,11,1,11,1,11,3,11,186,
		8,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,195,8,12,1,12,1,12,1,13,1,
		13,1,14,1,14,1,14,3,14,204,8,14,1,15,3,15,207,8,15,1,15,1,15,1,16,1,16,
		1,16,5,16,214,8,16,10,16,12,16,217,9,16,1,17,1,17,1,18,1,18,1,18,5,18,
		224,8,18,10,18,12,18,227,9,18,1,19,1,19,1,19,1,19,5,19,233,8,19,10,19,
		12,19,236,9,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,3,22,251,8,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,259,8,23,1,
		23,1,23,1,24,1,24,1,24,3,24,266,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,3,24,280,8,24,1,25,1,25,3,25,284,8,25,1,25,1,
		25,1,25,3,25,289,8,25,3,25,291,8,25,1,26,1,26,1,26,4,26,296,8,26,11,26,
		12,26,297,1,27,1,27,1,27,1,27,1,27,3,27,305,8,27,1,27,3,27,308,8,27,1,
		27,0,0,28,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
		44,46,48,50,52,54,0,1,1,0,13,17,337,0,56,1,0,0,0,2,70,1,0,0,0,4,73,1,0,
		0,0,6,100,1,0,0,0,8,102,1,0,0,0,10,105,1,0,0,0,12,116,1,0,0,0,14,118,1,
		0,0,0,16,122,1,0,0,0,18,140,1,0,0,0,20,168,1,0,0,0,22,185,1,0,0,0,24,189,
		1,0,0,0,26,198,1,0,0,0,28,203,1,0,0,0,30,206,1,0,0,0,32,210,1,0,0,0,34,
		218,1,0,0,0,36,220,1,0,0,0,38,228,1,0,0,0,40,239,1,0,0,0,42,241,1,0,0,
		0,44,250,1,0,0,0,46,252,1,0,0,0,48,279,1,0,0,0,50,290,1,0,0,0,52,295,1,
		0,0,0,54,299,1,0,0,0,56,59,5,1,0,0,57,60,5,38,0,0,58,60,3,2,1,0,59,57,
		1,0,0,0,59,58,1,0,0,0,60,61,1,0,0,0,61,62,5,2,0,0,62,1,1,0,0,0,63,69,3,
		4,2,0,64,69,3,54,27,0,65,69,3,24,12,0,66,69,3,14,7,0,67,69,5,38,0,0,68,
		63,1,0,0,0,68,64,1,0,0,0,68,65,1,0,0,0,68,66,1,0,0,0,68,67,1,0,0,0,69,
		72,1,0,0,0,70,68,1,0,0,0,70,71,1,0,0,0,71,3,1,0,0,0,72,70,1,0,0,0,73,74,
		3,50,25,0,74,76,3,42,21,0,75,77,3,38,19,0,76,75,1,0,0,0,76,77,1,0,0,0,
		77,79,1,0,0,0,78,80,3,46,23,0,79,78,1,0,0,0,79,80,1,0,0,0,80,82,1,0,0,
		0,81,83,3,6,3,0,82,81,1,0,0,0,82,83,1,0,0,0,83,93,1,0,0,0,84,89,5,3,0,
		0,85,88,3,12,6,0,86,88,5,38,0,0,87,85,1,0,0,0,87,86,1,0,0,0,88,91,1,0,
		0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,94,5,4,
		0,0,93,84,1,0,0,0,93,94,1,0,0,0,94,5,1,0,0,0,95,97,3,8,4,0,96,98,3,10,
		5,0,97,96,1,0,0,0,97,98,1,0,0,0,98,101,1,0,0,0,99,101,3,10,5,0,100,95,
		1,0,0,0,100,99,1,0,0,0,101,7,1,0,0,0,102,103,5,5,0,0,103,104,3,42,21,0,
		104,9,1,0,0,0,105,106,5,6,0,0,106,111,3,42,21,0,107,108,5,7,0,0,108,110,
		3,42,21,0,109,107,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,
		0,0,112,11,1,0,0,0,113,111,1,0,0,0,114,117,3,16,8,0,115,117,3,18,9,0,116,
		114,1,0,0,0,116,115,1,0,0,0,117,13,1,0,0,0,118,119,5,8,0,0,119,120,3,42,
		21,0,120,15,1,0,0,0,121,123,3,28,14,0,122,121,1,0,0,0,122,123,1,0,0,0,
		123,125,1,0,0,0,124,126,3,44,22,0,125,124,1,0,0,0,125,126,1,0,0,0,126,
		135,1,0,0,0,127,129,3,48,24,0,128,127,1,0,0,0,128,129,1,0,0,0,129,130,
		1,0,0,0,130,136,3,42,21,0,131,132,3,42,21,0,132,133,5,9,0,0,133,134,3,
		48,24,0,134,136,1,0,0,0,135,128,1,0,0,0,135,131,1,0,0,0,136,137,1,0,0,
		0,137,138,5,38,0,0,138,17,1,0,0,0,139,141,3,28,14,0,140,139,1,0,0,0,140,
		141,1,0,0,0,141,143,1,0,0,0,142,144,3,44,22,0,143,142,1,0,0,0,143,144,
		1,0,0,0,144,164,1,0,0,0,145,147,3,48,24,0,146,145,1,0,0,0,146,147,1,0,
		0,0,147,148,1,0,0,0,148,149,3,42,21,0,149,151,5,10,0,0,150,152,3,32,16,
		0,151,150,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,154,5,11,0,0,154,
		165,1,0,0,0,155,156,3,42,21,0,156,158,5,10,0,0,157,159,3,32,16,0,158,157,
		1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,161,5,11,0,0,161,162,5,9,0,
		0,162,163,3,48,24,0,163,165,1,0,0,0,164,146,1,0,0,0,164,155,1,0,0,0,165,
		166,1,0,0,0,166,167,5,38,0,0,167,19,1,0,0,0,168,176,3,42,21,0,169,170,
		5,12,0,0,170,172,3,42,21,0,171,173,3,26,13,0,172,171,1,0,0,0,172,173,1,
		0,0,0,173,174,1,0,0,0,174,175,5,12,0,0,175,177,1,0,0,0,176,169,1,0,0,0,
		176,177,1,0,0,0,177,21,1,0,0,0,178,179,5,12,0,0,179,181,3,42,21,0,180,
		182,3,26,13,0,181,180,1,0,0,0,181,182,1,0,0,0,182,183,1,0,0,0,183,184,
		5,12,0,0,184,186,1,0,0,0,185,178,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,
		0,187,188,3,42,21,0,188,23,1,0,0,0,189,190,3,20,10,0,190,191,5,36,0,0,
		191,194,3,22,11,0,192,193,5,9,0,0,193,195,3,46,23,0,194,192,1,0,0,0,194,
		195,1,0,0,0,195,196,1,0,0,0,196,197,5,38,0,0,197,25,1,0,0,0,198,199,7,
		0,0,0,199,27,1,0,0,0,200,204,5,18,0,0,201,204,5,19,0,0,202,204,5,20,0,
		0,203,200,1,0,0,0,203,201,1,0,0,0,203,202,1,0,0,0,204,29,1,0,0,0,205,207,
		3,48,24,0,206,205,1,0,0,0,206,207,1,0,0,0,207,208,1,0,0,0,208,209,3,42,
		21,0,209,31,1,0,0,0,210,215,3,30,15,0,211,212,5,7,0,0,212,214,3,30,15,
		0,213,211,1,0,0,0,214,217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,
		33,1,0,0,0,217,215,1,0,0,0,218,219,3,48,24,0,219,35,1,0,0,0,220,225,3,
		34,17,0,221,222,5,7,0,0,222,224,3,34,17,0,223,221,1,0,0,0,224,227,1,0,
		0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,37,1,0,0,0,227,225,1,0,0,0,228,
		229,5,21,0,0,229,234,3,40,20,0,230,231,5,7,0,0,231,233,3,40,20,0,232,230,
		1,0,0,0,233,236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,237,1,0,0,
		0,236,234,1,0,0,0,237,238,5,22,0,0,238,39,1,0,0,0,239,240,3,42,21,0,240,
		41,1,0,0,0,241,242,5,39,0,0,242,43,1,0,0,0,243,251,5,23,0,0,244,251,5,
		24,0,0,245,251,5,25,0,0,246,251,5,26,0,0,247,251,5,27,0,0,248,251,5,28,
		0,0,249,251,5,29,0,0,250,243,1,0,0,0,250,244,1,0,0,0,250,245,1,0,0,0,250,
		246,1,0,0,0,250,247,1,0,0,0,250,248,1,0,0,0,250,249,1,0,0,0,251,45,1,0,
		0,0,252,253,5,30,0,0,253,258,3,42,21,0,254,255,5,10,0,0,255,256,3,42,21,
		0,256,257,5,11,0,0,257,259,1,0,0,0,258,254,1,0,0,0,258,259,1,0,0,0,259,
		260,1,0,0,0,260,261,5,31,0,0,261,47,1,0,0,0,262,263,3,42,21,0,263,265,
		5,21,0,0,264,266,3,36,18,0,265,264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,
		0,0,267,268,5,22,0,0,268,280,1,0,0,0,269,270,3,42,21,0,270,271,5,40,0,
		0,271,272,5,41,0,0,272,280,1,0,0,0,273,274,3,40,20,0,274,275,5,40,0,0,
		275,276,5,41,0,0,276,280,1,0,0,0,277,280,3,40,20,0,278,280,3,42,21,0,279,
		262,1,0,0,0,279,269,1,0,0,0,279,273,1,0,0,0,279,277,1,0,0,0,279,278,1,
		0,0,0,280,49,1,0,0,0,281,283,5,32,0,0,282,284,5,33,0,0,283,282,1,0,0,0,
		283,284,1,0,0,0,284,291,1,0,0,0,285,291,5,33,0,0,286,288,5,34,0,0,287,
		289,5,33,0,0,288,287,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,281,1,
		0,0,0,290,285,1,0,0,0,290,286,1,0,0,0,291,51,1,0,0,0,292,293,3,42,21,0,
		293,294,5,38,0,0,294,296,1,0,0,0,295,292,1,0,0,0,296,297,1,0,0,0,297,295,
		1,0,0,0,297,298,1,0,0,0,298,53,1,0,0,0,299,300,5,35,0,0,300,307,3,42,21,
		0,301,302,5,3,0,0,302,304,5,38,0,0,303,305,3,52,26,0,304,303,1,0,0,0,304,
		305,1,0,0,0,305,306,1,0,0,0,306,308,5,4,0,0,307,301,1,0,0,0,307,308,1,
		0,0,0,308,55,1,0,0,0,43,59,68,70,76,79,82,87,89,93,97,100,111,116,122,
		125,128,135,140,143,146,151,158,164,172,176,181,185,194,203,206,215,225,
		234,250,258,265,279,283,288,290,297,304,307
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
