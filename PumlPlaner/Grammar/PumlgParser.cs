//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Grammar/Pumlg.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PumlgParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, CONNECTOR=36, NEWPAGE=37, NEWLINE=38, 
		IDENT=39, COMMENT=40, WS=41;
	public const int
		RULE_uml = 0, RULE_class_diagram = 1, RULE_class_declaration = 2, RULE_hide_declaration = 3, 
		RULE_attribute = 4, RULE_method = 5, RULE_connection_left = 6, RULE_connection_right = 7, 
		RULE_connection = 8, RULE_multiplicity = 9, RULE_visibility = 10, RULE_function_argument = 11, 
		RULE_function_argument_list = 12, RULE_template_argument = 13, RULE_template_argument_list = 14, 
		RULE_ident = 15, RULE_modifiers = 16, RULE_stereotype = 17, RULE_type_declaration = 18, 
		RULE_class_type = 19, RULE_item_list = 20, RULE_enum_declaration = 21;
	public static readonly string[] ruleNames = {
		"uml", "class_diagram", "class_declaration", "hide_declaration", "attribute", 
		"method", "connection_left", "connection_right", "connection", "multiplicity", 
		"visibility", "function_argument", "function_argument_list", "template_argument", 
		"template_argument_list", "ident", "modifiers", "stereotype", "type_declaration", 
		"class_type", "item_list", "enum_declaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'@startuml'", "'@enduml'", "'{'", "'}'", "'hide'", "'('", "')'", 
		"'\"'", "':'", "'*'", "'0..1'", "'0..*'", "'1..*'", "'1'", "'+'", "'-'", 
		"'#'", "','", "'{static}'", "'{abstract}'", "'{override}'", "'{virtual}'", 
		"'{sealed}'", "'{readonly}'", "'{const}'", "'<<'", "'>>'", "'<'", "'>'", 
		"'['", "']'", "'abstract'", "'class'", "'interface'", "'enum'", null, 
		"'newpage'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"CONNECTOR", "NEWPAGE", "NEWLINE", "IDENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Pumlg.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PumlgParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PumlgParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PumlgParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class UmlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PumlgParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_diagramContext class_diagram() {
			return GetRuleContext<Class_diagramContext>(0);
		}
		public UmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterUml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitUml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UmlContext uml() {
		UmlContext _localctx = new UmlContext(Context, State);
		EnterRule(_localctx, 0, RULE_uml);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(T__0);
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 45;
				Match(NEWLINE);
				}
				break;
			case 2:
				{
				State = 46;
				class_diagram();
				}
				break;
			}
			State = 49;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_diagramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_declarationContext[] class_declaration() {
			return GetRuleContexts<Class_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_declarationContext class_declaration(int i) {
			return GetRuleContext<Class_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionContext[] connection() {
			return GetRuleContexts<ConnectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionContext connection(int i) {
			return GetRuleContext<ConnectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_declarationContext[] enum_declaration() {
			return GetRuleContexts<Enum_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_declarationContext enum_declaration(int i) {
			return GetRuleContext<Enum_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hide_declarationContext[] hide_declaration() {
			return GetRuleContexts<Hide_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Hide_declarationContext hide_declaration(int i) {
			return GetRuleContext<Hide_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PumlgParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PumlgParser.NEWLINE, i);
		}
		public Class_diagramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_diagram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterClass_diagram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitClass_diagram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_diagram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_diagramContext class_diagram() {
		Class_diagramContext _localctx = new Class_diagramContext(Context, State);
		EnterRule(_localctx, 2, RULE_class_diagram);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 889058230304L) != 0)) {
				{
				State = 56;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__31:
				case T__32:
				case T__33:
					{
					State = 51;
					class_declaration();
					}
					break;
				case IDENT:
					{
					State = 52;
					connection();
					}
					break;
				case T__34:
					{
					State = 53;
					enum_declaration();
					}
					break;
				case T__4:
					{
					State = 54;
					hide_declaration();
					}
					break;
				case NEWLINE:
					{
					State = 55;
					Match(NEWLINE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PumlgParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PumlgParser.NEWLINE, i);
		}
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			class_type();
			State = 62;
			ident();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 63;
				Match(T__2);
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 824700534784L) != 0)) {
					{
					State = 67;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 64;
						attribute();
						}
						break;
					case 2:
						{
						State = 65;
						method();
						}
						break;
					case 3:
						{
						State = 66;
						Match(NEWLINE);
						}
						break;
					}
					}
					State = 71;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 72;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hide_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public Hide_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hide_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterHide_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitHide_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHide_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hide_declarationContext hide_declaration() {
		Hide_declarationContext _localctx = new Hide_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_hide_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__4);
			State = 76;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PumlgParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 8, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 78;
				visibility();
				}
			}

			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 66584576L) != 0)) {
				{
				State = 81;
				modifiers();
				}
			}

			State = 85;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 84;
				type_declaration();
				}
				break;
			}
			State = 87;
			ident();
			State = 88;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PumlgParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifiersContext modifiers() {
			return GetRuleContext<ModifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argument_listContext function_argument_list() {
			return GetRuleContext<Function_argument_listContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 10, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				State = 90;
				visibility();
				}
			}

			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 66584576L) != 0)) {
				{
				State = 93;
				modifiers();
				}
			}

			State = 97;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 96;
				type_declaration();
				}
				break;
			}
			State = 99;
			ident();
			State = 100;
			Match(T__5);
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 101;
				function_argument_list();
				}
			}

			State = 104;
			Match(T__6);
			State = 105;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Connection_leftContext : ParserRuleContext {
		public IdentContext instance;
		public IdentContext attrib;
		public MultiplicityContext mult;
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityContext multiplicity() {
			return GetRuleContext<MultiplicityContext>(0);
		}
		public Connection_leftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connection_left; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterConnection_left(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitConnection_left(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnection_left(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Connection_leftContext connection_left() {
		Connection_leftContext _localctx = new Connection_leftContext(Context, State);
		EnterRule(_localctx, 12, RULE_connection_left);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_localctx.instance = ident();
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 108;
				Match(T__7);
				State = 109;
				_localctx.attrib = ident();
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27648L) != 0)) {
					{
					State = 110;
					_localctx.mult = multiplicity();
					}
				}

				State = 113;
				Match(T__7);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Connection_rightContext : ParserRuleContext {
		public IdentContext attrib;
		public MultiplicityContext mult;
		public IdentContext instance;
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityContext multiplicity() {
			return GetRuleContext<MultiplicityContext>(0);
		}
		public Connection_rightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connection_right; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterConnection_right(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitConnection_right(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnection_right(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Connection_rightContext connection_right() {
		Connection_rightContext _localctx = new Connection_rightContext(Context, State);
		EnterRule(_localctx, 14, RULE_connection_right);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 117;
				Match(T__7);
				State = 118;
				_localctx.attrib = ident();
				State = 120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27648L) != 0)) {
					{
					State = 119;
					_localctx.mult = multiplicity();
					}
				}

				State = 122;
				Match(T__7);
				}
			}

			State = 126;
			_localctx.instance = ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionContext : ParserRuleContext {
		public Connection_leftContext left;
		public Connection_rightContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTOR() { return GetToken(PumlgParser.CONNECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PumlgParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Connection_leftContext connection_left() {
			return GetRuleContext<Connection_leftContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Connection_rightContext connection_right() {
			return GetRuleContext<Connection_rightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StereotypeContext stereotype() {
			return GetRuleContext<StereotypeContext>(0);
		}
		public ConnectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConnection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionContext connection() {
		ConnectionContext _localctx = new ConnectionContext(Context, State);
		EnterRule(_localctx, 16, RULE_connection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_localctx.left = connection_left();
			State = 129;
			Match(CONNECTOR);
			State = 130;
			_localctx.right = connection_right();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 131;
				Match(T__8);
				State = 132;
				stereotype();
				}
			}

			State = 135;
			Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicityContext : ParserRuleContext {
		public MultiplicityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterMultiplicity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitMultiplicity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicityContext multiplicity() {
		MultiplicityContext _localctx = new MultiplicityContext(Context, State);
		EnterRule(_localctx, 18, RULE_multiplicity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				{
				State = 137;
				Match(T__9);
				}
				break;
			case T__10:
				{
				State = 138;
				Match(T__10);
				State = 139;
				Match(T__11);
				}
				break;
			case T__12:
				{
				State = 140;
				Match(T__12);
				}
				break;
			case T__13:
				{
				State = 141;
				Match(T__13);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
	 
		public VisibilityContext() { }
		public virtual void CopyFrom(VisibilityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Visibility_publicContext : VisibilityContext {
		public Visibility_publicContext(VisibilityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterVisibility_public(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitVisibility_public(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility_public(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Visibility_privateContext : VisibilityContext {
		public Visibility_privateContext(VisibilityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterVisibility_private(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitVisibility_private(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility_private(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Visibility_protectedContext : VisibilityContext {
		public Visibility_protectedContext(VisibilityContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterVisibility_protected(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitVisibility_protected(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility_protected(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 20, RULE_visibility);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				_localctx = new Visibility_publicContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 144;
				Match(T__14);
				}
				break;
			case T__15:
				_localctx = new Visibility_privateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				Match(T__15);
				}
				break;
			case T__16:
				_localctx = new Visibility_protectedContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 146;
				Match(T__16);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterFunction_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitFunction_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentContext function_argument() {
		Function_argumentContext _localctx = new Function_argumentContext(Context, State);
		EnterRule(_localctx, 22, RULE_function_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 149;
				type_declaration();
				}
				break;
			}
			State = 152;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_argumentContext[] function_argument() {
			return GetRuleContexts<Function_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argumentContext function_argument(int i) {
			return GetRuleContext<Function_argumentContext>(i);
		}
		public Function_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterFunction_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitFunction_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argument_listContext function_argument_list() {
		Function_argument_listContext _localctx = new Function_argument_listContext(Context, State);
		EnterRule(_localctx, 24, RULE_function_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			function_argument();
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17) {
				{
				{
				State = 155;
				Match(T__17);
				State = 156;
				function_argument();
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Template_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterTemplate_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitTemplate_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_argumentContext template_argument() {
		Template_argumentContext _localctx = new Template_argumentContext(Context, State);
		EnterRule(_localctx, 26, RULE_template_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			type_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Template_argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Template_argumentContext[] template_argument() {
			return GetRuleContexts<Template_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_argumentContext template_argument(int i) {
			return GetRuleContext<Template_argumentContext>(i);
		}
		public Template_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterTemplate_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitTemplate_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Template_argument_listContext template_argument_list() {
		Template_argument_listContext _localctx = new Template_argument_listContext(Context, State);
		EnterRule(_localctx, 28, RULE_template_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			template_argument();
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__17) {
				{
				{
				State = 165;
				Match(T__17);
				State = 166;
				template_argument();
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(PumlgParser.IDENT, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 30, RULE_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifiersContext : ParserRuleContext {
		public IToken static_mod;
		public IToken abstract_mod;
		public IToken override_mod;
		public IToken virtual_mod;
		public IToken sealed_mod;
		public IToken readonly_mod;
		public IToken const_mod;
		public ModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitModifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifiersContext modifiers() {
		ModifiersContext _localctx = new ModifiersContext(Context, State);
		EnterRule(_localctx, 32, RULE_modifiers);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				_localctx.static_mod = Match(T__18);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				_localctx.abstract_mod = Match(T__19);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 3);
				{
				State = 176;
				_localctx.override_mod = Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				_localctx.virtual_mod = Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 5);
				{
				State = 178;
				_localctx.sealed_mod = Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 6);
				{
				State = 179;
				_localctx.readonly_mod = Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 7);
				{
				State = 180;
				_localctx.const_mod = Match(T__24);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StereotypeContext : ParserRuleContext {
		public IdentContext name;
		public IdentContext _ident;
		public IList<IdentContext> _args = new List<IdentContext>();
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public StereotypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stereotype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterStereotype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitStereotype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStereotype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StereotypeContext stereotype() {
		StereotypeContext _localctx = new StereotypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_stereotype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(T__25);
			State = 184;
			_localctx.name = ident();
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 185;
				Match(T__5);
				State = 186;
				_localctx._ident = ident();
				_localctx._args.Add(_localctx._ident);
				State = 187;
				Match(T__6);
				}
			}

			State = 191;
			Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
	 
		public Type_declarationContext() { }
		public virtual void CopyFrom(Type_declarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class List_typeContext : Type_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public List_typeContext(Type_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterList_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitList_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_type(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Simple_typeContext : Type_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public Simple_typeContext(Type_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Template_typeContext : Type_declarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Template_argument_listContext template_argument_list() {
			return GetRuleContext<Template_argument_listContext>(0);
		}
		public Template_typeContext(Type_declarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterTemplate_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitTemplate_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_type_declaration);
		int _la;
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				_localctx = new Template_typeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				ident();
				State = 194;
				Match(T__27);
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENT) {
					{
					State = 195;
					template_argument_list();
					}
				}

				State = 198;
				Match(T__28);
				}
				break;
			case 2:
				_localctx = new List_typeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				ident();
				State = 201;
				Match(T__29);
				State = 202;
				Match(T__30);
				}
				break;
			case 3:
				_localctx = new Simple_typeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 204;
				ident();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 38, RULE_class_type);
		int _la;
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207;
				Match(T__31);
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32) {
					{
					State = 208;
					Match(T__32);
					}
				}

				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 3);
				{
				State = 212;
				Match(T__33);
				State = 214;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__32) {
					{
					State = 213;
					Match(T__32);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Item_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(PumlgParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(PumlgParser.NEWLINE, i);
		}
		public Item_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterItem_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitItem_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Item_listContext item_list() {
		Item_listContext _localctx = new Item_listContext(Context, State);
		EnterRule(_localctx, 40, RULE_item_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 218;
				ident();
				State = 219;
				Match(NEWLINE);
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==IDENT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(PumlgParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Item_listContext item_list() {
			return GetRuleContext<Item_listContext>(0);
		}
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.EnterEnum_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPumlgListener typedListener = listener as IPumlgListener;
			if (typedListener != null) typedListener.ExitEnum_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPumlgVisitor<TResult> typedVisitor = visitor as IPumlgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_enum_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			Match(T__34);
			State = 226;
			ident();
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 227;
				Match(T__2);
				State = 228;
				Match(NEWLINE);
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENT) {
					{
					State = 229;
					item_list();
					}
				}

				State = 232;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,41,236,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,1,0,3,0,48,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,5,1,57,8,1,10,1,12,
		1,60,9,1,1,2,1,2,1,2,1,2,1,2,1,2,5,2,68,8,2,10,2,12,2,71,9,2,1,2,3,2,74,
		8,2,1,3,1,3,1,3,1,4,3,4,80,8,4,1,4,3,4,83,8,4,1,4,3,4,86,8,4,1,4,1,4,1,
		4,1,5,3,5,92,8,5,1,5,3,5,95,8,5,1,5,3,5,98,8,5,1,5,1,5,1,5,3,5,103,8,5,
		1,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,112,8,6,1,6,1,6,3,6,116,8,6,1,7,1,7,1,
		7,3,7,121,8,7,1,7,1,7,3,7,125,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,134,
		8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,143,8,9,1,10,1,10,1,10,3,10,148,8,
		10,1,11,3,11,151,8,11,1,11,1,11,1,12,1,12,1,12,5,12,158,8,12,10,12,12,
		12,161,9,12,1,13,1,13,1,14,1,14,1,14,5,14,168,8,14,10,14,12,14,171,9,14,
		1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,182,8,16,1,17,1,17,1,
		17,1,17,1,17,1,17,3,17,190,8,17,1,17,1,17,1,18,1,18,1,18,3,18,197,8,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,206,8,18,1,19,1,19,3,19,210,8,
		19,1,19,1,19,1,19,3,19,215,8,19,3,19,217,8,19,1,20,1,20,1,20,4,20,222,
		8,20,11,20,12,20,223,1,21,1,21,1,21,1,21,1,21,3,21,231,8,21,1,21,3,21,
		234,8,21,1,21,0,0,22,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,0,0,260,0,44,1,0,0,0,2,58,1,0,0,0,4,61,1,0,0,0,6,75,1,0,0,
		0,8,79,1,0,0,0,10,91,1,0,0,0,12,107,1,0,0,0,14,124,1,0,0,0,16,128,1,0,
		0,0,18,142,1,0,0,0,20,147,1,0,0,0,22,150,1,0,0,0,24,154,1,0,0,0,26,162,
		1,0,0,0,28,164,1,0,0,0,30,172,1,0,0,0,32,181,1,0,0,0,34,183,1,0,0,0,36,
		205,1,0,0,0,38,216,1,0,0,0,40,221,1,0,0,0,42,225,1,0,0,0,44,47,5,1,0,0,
		45,48,5,38,0,0,46,48,3,2,1,0,47,45,1,0,0,0,47,46,1,0,0,0,48,49,1,0,0,0,
		49,50,5,2,0,0,50,1,1,0,0,0,51,57,3,4,2,0,52,57,3,16,8,0,53,57,3,42,21,
		0,54,57,3,6,3,0,55,57,5,38,0,0,56,51,1,0,0,0,56,52,1,0,0,0,56,53,1,0,0,
		0,56,54,1,0,0,0,56,55,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,
		0,59,3,1,0,0,0,60,58,1,0,0,0,61,62,3,38,19,0,62,73,3,30,15,0,63,69,5,3,
		0,0,64,68,3,8,4,0,65,68,3,10,5,0,66,68,5,38,0,0,67,64,1,0,0,0,67,65,1,
		0,0,0,67,66,1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,1,
		0,0,0,71,69,1,0,0,0,72,74,5,4,0,0,73,63,1,0,0,0,73,74,1,0,0,0,74,5,1,0,
		0,0,75,76,5,5,0,0,76,77,3,30,15,0,77,7,1,0,0,0,78,80,3,20,10,0,79,78,1,
		0,0,0,79,80,1,0,0,0,80,82,1,0,0,0,81,83,3,32,16,0,82,81,1,0,0,0,82,83,
		1,0,0,0,83,85,1,0,0,0,84,86,3,36,18,0,85,84,1,0,0,0,85,86,1,0,0,0,86,87,
		1,0,0,0,87,88,3,30,15,0,88,89,5,38,0,0,89,9,1,0,0,0,90,92,3,20,10,0,91,
		90,1,0,0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,95,3,32,16,0,94,93,1,0,0,0,94,
		95,1,0,0,0,95,97,1,0,0,0,96,98,3,36,18,0,97,96,1,0,0,0,97,98,1,0,0,0,98,
		99,1,0,0,0,99,100,3,30,15,0,100,102,5,6,0,0,101,103,3,24,12,0,102,101,
		1,0,0,0,102,103,1,0,0,0,103,104,1,0,0,0,104,105,5,7,0,0,105,106,5,38,0,
		0,106,11,1,0,0,0,107,115,3,30,15,0,108,109,5,8,0,0,109,111,3,30,15,0,110,
		112,3,18,9,0,111,110,1,0,0,0,111,112,1,0,0,0,112,113,1,0,0,0,113,114,5,
		8,0,0,114,116,1,0,0,0,115,108,1,0,0,0,115,116,1,0,0,0,116,13,1,0,0,0,117,
		118,5,8,0,0,118,120,3,30,15,0,119,121,3,18,9,0,120,119,1,0,0,0,120,121,
		1,0,0,0,121,122,1,0,0,0,122,123,5,8,0,0,123,125,1,0,0,0,124,117,1,0,0,
		0,124,125,1,0,0,0,125,126,1,0,0,0,126,127,3,30,15,0,127,15,1,0,0,0,128,
		129,3,12,6,0,129,130,5,36,0,0,130,133,3,14,7,0,131,132,5,9,0,0,132,134,
		3,34,17,0,133,131,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,136,5,38,
		0,0,136,17,1,0,0,0,137,143,5,10,0,0,138,139,5,11,0,0,139,143,5,12,0,0,
		140,143,5,13,0,0,141,143,5,14,0,0,142,137,1,0,0,0,142,138,1,0,0,0,142,
		140,1,0,0,0,142,141,1,0,0,0,143,19,1,0,0,0,144,148,5,15,0,0,145,148,5,
		16,0,0,146,148,5,17,0,0,147,144,1,0,0,0,147,145,1,0,0,0,147,146,1,0,0,
		0,148,21,1,0,0,0,149,151,3,36,18,0,150,149,1,0,0,0,150,151,1,0,0,0,151,
		152,1,0,0,0,152,153,3,30,15,0,153,23,1,0,0,0,154,159,3,22,11,0,155,156,
		5,18,0,0,156,158,3,22,11,0,157,155,1,0,0,0,158,161,1,0,0,0,159,157,1,0,
		0,0,159,160,1,0,0,0,160,25,1,0,0,0,161,159,1,0,0,0,162,163,3,36,18,0,163,
		27,1,0,0,0,164,169,3,26,13,0,165,166,5,18,0,0,166,168,3,26,13,0,167,165,
		1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,29,1,0,0,0,
		171,169,1,0,0,0,172,173,5,39,0,0,173,31,1,0,0,0,174,182,5,19,0,0,175,182,
		5,20,0,0,176,182,5,21,0,0,177,182,5,22,0,0,178,182,5,23,0,0,179,182,5,
		24,0,0,180,182,5,25,0,0,181,174,1,0,0,0,181,175,1,0,0,0,181,176,1,0,0,
		0,181,177,1,0,0,0,181,178,1,0,0,0,181,179,1,0,0,0,181,180,1,0,0,0,182,
		33,1,0,0,0,183,184,5,26,0,0,184,189,3,30,15,0,185,186,5,6,0,0,186,187,
		3,30,15,0,187,188,5,7,0,0,188,190,1,0,0,0,189,185,1,0,0,0,189,190,1,0,
		0,0,190,191,1,0,0,0,191,192,5,27,0,0,192,35,1,0,0,0,193,194,3,30,15,0,
		194,196,5,28,0,0,195,197,3,28,14,0,196,195,1,0,0,0,196,197,1,0,0,0,197,
		198,1,0,0,0,198,199,5,29,0,0,199,206,1,0,0,0,200,201,3,30,15,0,201,202,
		5,30,0,0,202,203,5,31,0,0,203,206,1,0,0,0,204,206,3,30,15,0,205,193,1,
		0,0,0,205,200,1,0,0,0,205,204,1,0,0,0,206,37,1,0,0,0,207,209,5,32,0,0,
		208,210,5,33,0,0,209,208,1,0,0,0,209,210,1,0,0,0,210,217,1,0,0,0,211,217,
		5,33,0,0,212,214,5,34,0,0,213,215,5,33,0,0,214,213,1,0,0,0,214,215,1,0,
		0,0,215,217,1,0,0,0,216,207,1,0,0,0,216,211,1,0,0,0,216,212,1,0,0,0,217,
		39,1,0,0,0,218,219,3,30,15,0,219,220,5,38,0,0,220,222,1,0,0,0,221,218,
		1,0,0,0,222,223,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,41,1,0,0,0,
		225,226,5,35,0,0,226,233,3,30,15,0,227,228,5,3,0,0,228,230,5,38,0,0,229,
		231,3,40,20,0,230,229,1,0,0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,234,
		5,4,0,0,233,227,1,0,0,0,233,234,1,0,0,0,234,43,1,0,0,0,33,47,56,58,67,
		69,73,79,82,85,91,94,97,102,111,115,120,124,133,142,147,150,159,169,181,
		189,196,205,209,214,216,223,230,233
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
